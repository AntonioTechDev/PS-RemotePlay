import asyncio
from pyremoteplay import RPDevice
from pyremoteplay.profile import Profiles

# Imposta il percorso predefinito per il file dei profili
Profiles.set_default_path(r"C:\Users\ADB\.pyremoteplay\.profile.json")

# Carica i profili salvati
profiles = Profiles.load()

# Verifica se ci sono account registrati
if not profiles.users:
    print("‚ùå Nessun account registrato. Esegui prima la registrazione con link_account.py!")
    exit()

# ‚úÖ Mostra gli account registrati
print("\nüéÆ Account registrati:")
for i, user in enumerate(profiles.users):
    print(f"{i + 1}. {user.name}")

# ‚úÖ Selezione dell'account da utilizzare
while True:
    try:
        account_choice = int(input("\nSeleziona l'account da utilizzare (inserisci il numero): "))
        if 1 <= account_choice <= len(profiles.users):
            selected_user = profiles.users[account_choice - 1]
            break
        else:
            print("‚ö†Ô∏è Numero non valido. Scegli un numero tra quelli disponibili.")
    except ValueError:
        print("‚ö†Ô∏è Inserisci un numero valido!")

# ‚úÖ Debug per verificare i dati dell'account selezionato
print("\nüîç Debug: Dati dell'account selezionato:", selected_user)

# ‚úÖ Recupera le console registrate per quell'account
user_hosts = selected_user.hosts if hasattr(selected_user, 'hosts') else selected_user.get("hosts", {})

# **‚úÖ Controllo se `user_hosts` √® una LISTA invece di un DIZIONARIO**
if isinstance(user_hosts, list):
    print("‚ö†Ô∏è Dati delle console in formato errato, correggiamo automaticamente...")
    new_hosts = {}
    for item in user_hosts:
        mac_address = item.get("Mac")  # Recuperiamo il MAC come chiave
        if mac_address:
            new_hosts[mac_address.upper()] = {
                "data": item,
                "type": "PS4"
            }
    user_hosts = new_hosts  # Aggiorniamo il valore corretto

# ‚úÖ Controllo se ci sono console registrate
if not user_hosts:
    print(f"‚ùå Nessuna console registrata per l'account {selected_user.name}. Associa una console prima di procedere.")
    exit()

print("\nüñ•Ô∏è Console registrate:")
console_list = list(user_hosts.keys())  # Ora user_hosts √® un dict, quindi possiamo usare .keys()
for i, mac in enumerate(console_list):
    nickname = user_hosts[mac]["data"]["Nickname"]
    print(f"{i + 1}. {nickname} (MAC: {mac})")

# ‚úÖ Selezione della console
while True:
    try:
        console_choice = int(input("\nSeleziona la console da utilizzare (inserisci il numero): "))
        if 1 <= console_choice <= len(console_list):
            selected_mac = console_list[console_choice - 1]
            break
        else:
            print("‚ö†Ô∏è Numero non valido. Scegli un numero tra quelli disponibili.")
    except ValueError:
        print("‚ö†Ô∏è Inserisci un numero valido!")

# ‚úÖ Recupera l'IP se presente nei dati salvati
ip_address = user_hosts[selected_mac]["data"].get("IP")

# ‚úÖ Se l'IP non √® registrato, chiedilo all'utente
if not ip_address:
    ip_address = input(f"\nInserisci l'IP della console {user_hosts[selected_mac]['data']['Nickname']}: ").strip()
    user_hosts[selected_mac]["data"]["IP"] = ip_address  # Salva l'IP per usi futuri
    profiles.save()

print(f"\nüì° IP della console selezionato: {ip_address}")

# ‚úÖ Creazione del dispositivo Remote Play
device = RPDevice(ip_address)

async def main(user_profile):
    try:
        # ‚úÖ Verifica lo stato della console
        print("\nüîå Verifica stato della console...")
        status = device.get_status()

        if not status:
            print("‚ùå Errore: impossibile ottenere lo stato della console. Assicurati che sia accesa e connessa alla rete.")
            return

        # ‚úÖ Recuperiamo il profilo corretto dell'utente per questa console
        user_profile = profiles.get_user_profile(user_profile.name)

        if not user_profile:
            print(f"‚ùå Errore: L'utente {user_profile.name} non √® registrato correttamente.")
            return

        # ‚úÖ Creazione della sessione Remote Play
        print("\nüéÆ Avvio della sessione Remote Play...")
        session = device.create_session(user=user_profile.name, profiles=profiles)

        if not session:
            print("‚ùå Errore: impossibile creare la sessione Remote Play.")
            return

        # ‚úÖ Connessione alla sessione
        success = await device.connect()
        if not success:
            print("‚ùå Errore: Connessione alla sessione Remote Play fallita.")
            return

        print(f"‚úÖ Sessione avviata con successo per {user_profile.name} su {user_hosts[selected_mac]['data']['Nickname']}!")

        # ‚úÖ Attendi il comando per chiudere la sessione
        while True:
            exit_cmd = input("\n‚úèÔ∏è Digita 'exit' per terminare la sessione: ").strip().lower()
            if exit_cmd == "exit":
                break

        # ‚úÖ Disconnessione e chiusura della sessione
        print("\nüîå Disconnessione della sessione...")
        await device.disconnect()
        print("‚úÖ Sessione terminata con successo!")

    except Exception as e:
        print(f"‚ùå Errore durante la sessione: {e}")

# Avvia il loop asyncio per gestire la sessione, passando `selected_user`
asyncio.run(main(selected_user))
